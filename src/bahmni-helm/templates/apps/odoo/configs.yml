{{ if .Values.apps }}{{ if .Values.apps.odoo }} {{ if .Values.apps.odoo.enabled }} 
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-odoo-configs
  labels:
    app: {{ .Release.Name }}-odoo
data:
  ODOO_DB_USER: odoo
  ODOO_DB_PASSWORD: password
  ODOO_DB_NAME: odoo
  ODOO_HOST: {{ .Release.Name }}-odoo 
  ODOO_USER: admin
  ODOO_PASSWORD: admin
  ODOO_MASTER_PASSWORD: password
  ODOO_PUBLIC_PORT: "8069"
  ODOO_EXTRA_ADDONS: odoo_addons
  ODOO_CONFIG_PATH: odoo_config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: odoo-conf
data:
  odoo.conf: |
    [options]
    addons_path = /opt/bahmni-addons,/mnt/extra-addons
    data_dir = /var/lib/odoo
    initializer_data_files_paths = /opt/odoo-config
    proxy_mode = True
    test_enable = False
    test_file = False
    without_demo = all
    workers = 4
    admin_passwd = ${ODOO_MASTER_PASSWORD}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-odoo-db
data:
  create_odoo_db.sh: |
    #!/bin/bash
    export PGPASSWORD=$POSTGRES_PASSWORD
    set -eu

    function create_user() {
      local user=$1
      local password=$2
      echo "  Creating '$user' user..."
      psql -h $POSTGRES_HOST -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" $POSTGRES_DB <<-EOSQL
          CREATE USER $user WITH UNENCRYPTED PASSWORD '$password';
          ALTER USER $user CREATEDB;
    EOSQL
    }

    # ODOO_USER=$(PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST --username $POSTGRES_USER $POSTGRES_DB -w -t -c "SELECT rolname FROM pg_roles WHERE pg_roles.rolname='$ODOO_DB_USER'")
    # if [ "$ODOO_USER" != "${ODOO_DB_USER}" ] ; then
    #   create_user ${ODOO_DB_USER} ${ODOO_DB_PASSWORD}
    # fi
    PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST --username $POSTGRES_USER $POSTGRES_DB  -tAc "SELECT 1 FROM pg_roles WHERE rolname='$ODOO_DB_USER'" | grep -q 1 ||  create_user ${ODOO_DB_USER} ${ODOO_DB_PASSWORD} 
{{ end }}{{ end }}{{ end }}