{{ if .Values.apps }}{{ if .Values.apps.mysql }} {{ if .Values.apps.mysql.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  serviceName: mysql-headless
  selector:
    matchLabels:
      app: mysql
  {{- if ne .Values.isAppliance true }}
  volumeClaimTemplates:
  - metadata:
      name: mysql-database
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
  {{- end }}
  template:
    metadata:
      labels:
        app: mysql
    spec:
    {{ if .Values.isAppliance }}
      volumes:
        - name: mysql-database
          persistentVolumeClaim:
            claimName: mysql-pvc
    {{ end }}
        - name: mysql-props
          configMap:
            name: mysql-props
      priorityClassName: high-priority
      containers:
        - name: mysql
          image: "{{ .Values.apps.mysql.image }}"
          args: [ "--character-set-server=utf8", "--collation-server=utf8_general_ci", "--log-bin", "--binlog-format=ROW" ]
          resources:
            requests:
              memory: "{{  .Values.apps.mysql.resources.requests.memory }}"
              cpu: "{{ .Values.apps.mysql.resources.requests.cpu }}"
          ports:
            - containerPort: 3306
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
            exec:
              command:
                - "sh"
                - "-c"
                - 'mysql -uroot -p${MYSQL_ROOT_PASSWORD} -h localhost -e "SELECT 1"'
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            exec:
              command:
                - "sh"
                - "-c"
                - 'mysqladmin -uroot -p${MYSQL_ROOT_PASSWORD} ping'
          volumeMounts:
            - name: mysql-database
              mountPath: "/var/lib/mysql"
            - name: mysql-props
              mountPath: /etc/mysql/conf.d/
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: mysql-configs
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_ROOT_USER
              valueFrom:
                configMapKeyRef:
                  name: mysql-configs
                  key: MYSQL_ROOT_USER
    {{ if .Values.selectDbHost }}
     {{- with .Values.apps.postgresql.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
{{ end }}{{ end }}{{ end }}
