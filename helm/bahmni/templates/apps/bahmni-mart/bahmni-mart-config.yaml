{{ if .Values.apps }}{{ if .Values.apps.bahmni_mart }} {{ if .Values.apps.bahmni_mart.enabled }} 
apiVersion: v1
kind: ConfigMap
metadata:
  name: mart-config
  labels:
    app: bahmni-mart
data:
  ANALYTICS_DB_HOST: postgres
  ANALYTICS_DB_NAME: {{.Values.apps.bahmni_mart.ANALYTICS_DB_NAME }} 
  ANALYTICS_DB_USER: {{.Values.apps.bahmni_mart.ANALYTICS_DB_USER }}
  ANALYTICS_DB_PASSWORD: {{.Values.apps.bahmni_mart.ANALYTICS_DB_PASSWORD }}
  CRON_TIME: {{.Values.apps.bahmni_mart.CRON_TIME }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mart-props
  labels:
    app: bahmni-mart
data:
  bahmni-mart.json: |
      {
      "jobs": [
      {
        "name": "Programs",
        "type": "programs",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Patients",
        "type": "patients",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Appointments",
        "type": "appointments",
        "chunkSizeToRead": "500",
        "groupedJobConfigs": [
          {
            "tableName": "appointment_service_default",
            "columnsToIgnore": [
            ]
          }
        ]
      },
      {
        "name": "Bed Management",
        "type": "bedManagement",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Location",
        "type": "location",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Operation Theater",
        "type": "operationTheater",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Person",
        "type": "person",
        "chunkSizeToRead": "500",
        "groupedJobConfigs": [
          {
            "tableName": "person_attributes",
            "columnsToIgnore": [
              "primaryContact",
              "secondaryContact",
              "primaryRelative",
              "familyNameLocal",
              "givenNameLocal",
              "middleNameLocal"
            ]
          },
          {
            "tableName": "person_details_default",
            "columnsToIgnore": [
              "prefix",
              "given_name",
              "middle_name",
              "family_name_prefix",
              "family_name",
              "family_name2",
              "family_name_suffix"
            ]
          }
        ]
      },
      {
        "name": "Provider",
        "type": "provider",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Visits And Encounters",
        "type": "visitsAndEncounters",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Medication And Orders",
        "type": "medicationAndOrders",
        "chunkSizeToRead": "500",
        "groupedJobConfigs": [
          {
            "tableName": "medication_data_default",
            "columnsToIgnore": [
              "instructions",
              "stop_notes"
            ]
          }
        ]
      },
      {
        "name": "Diagnoses And Conditions",
        "type": "diagnosesAndConditions",
        "chunkSizeToRead": "500"
      },
      {
        "name": "Bacteriology Data",
        "conceptReferenceSource": "",
        "type": "bacteriology",
        "incrementalUpdateConfig": {
          "updateOn": "encounter_id",
          "eventCategory": "Encounter",
          "openmrsTableName": "encounter"
        }
      },
      {
        "name": "MetaData Dictionary",
        "type": "metadata",
        "conceptReferenceSource": ""
      },
      {
        "name": "Obs Data",
        "type": "obs",
        "incrementalUpdateConfig": {
          "updateOn": "encounter_id",
          "eventCategory": "Encounter",
          "openmrsTableName": "encounter"
        },
        "separateTableConfig": {
          "enableForAddMoreAndMultiSelect": true,
          "separateTables": [
          ]
        },
        "conceptReferenceSource": "",
        "ignoreAllFreeTextConcepts": true,
        "columnsToIgnore": [
          "Image",
          "Video"
        ]
      },
      {
        "name": "Form2 Obs Data",
        "type": "form2obs",
        "incrementalUpdateConfig": {
          "updateOn": "encounter_id",
          "eventCategory": "Encounter",
          "openmrsTableName": "encounter"
        },
        "separateTableConfig": {
          "enableForAddMoreAndMultiSelect": true,
          "separateTables": [
          ]
        },
        "conceptReferenceSource": "",
        "ignoreAllFreeTextConcepts": true,
        "columnsToIgnore": [
          "Image"
        ]
      },
      {
        "name": "Registration Second Page",
        "type": "reg",
        "columnsToIgnore": [],
        "separateTableConfig": {
          "enableForAddMoreAndMultiSelect": true,
          "separateTables": []
        },
        "incrementalUpdateConfig": {
          "updateOn": "encounter_id",
          "eventCategory": "Encounter",
          "openmrsTableName": "encounter"
        }
      },
      {
        "name": "Disposition Data",
        "type": "disposition",
        "columnsToIgnore": [],
        "incrementalUpdateConfig": {
          "updateOn": "encounter_id",
          "eventCategory": "Encounter",
          "openmrsTableName": "encounter"
        }
      }
      ],
      "procedures": [
        {
          "name": "Discharge Date Procedure",
          "sourceFilePath": "classpath:procedureSql/dischargeDateProc.sql"
        },
        {
          "name": "Age Group Procedure",
          "sourceFilePath": "classpath:procedureSql/ageGroupProc.sql"
        }
      ],
      "views": [
      {
        "name": "patient_program_view",
        "sourceFilePath": "classpath:viewSql/patientProgramView.sql"
      },
      {
        "name": "patient_visits_encounters_view",
        "sourceFilePath": "classpath:viewSql/patientVisitsEncountersView.sql"
      },
      {
        "name": "appointment_admin_panel_view",
        "sql": "SELECT * FROM appointment_service_default LEFT OUTER JOIN service_availability_default USING (appointment_service_id, service_name)"
      },
      {
        "name": "patient_details_view",
        "sourceFilePath": "classpath:viewSql/patientDetailsView.sql"
      },
      {
        "name": "patient_information_view",
        "sourceFilePath": "classpath:viewSql/patientInformationView.sql"
      },
      {
        "name": "bed_management_view",
        "sourceFilePath": "classpath:viewSql/bedManagementView.sql"
      },
      {
        "name": "bed_management_locations_view",
        "sourceFilePath": "classpath:viewSql/locationWiseDischarge.sql"
      },
      {
        "name": "patient_bed_view",
        "sourceFilePath": "classpath:viewSql/patientBedView.sql"
      },
      {
        "name": "patient_operation_theater_view",
        "sourceFilePath": "classpath:viewSql/patientOperationTheaterView.sql"
      },
      {
        "name": "patient_appointment_view",
        "sourceFilePath": "classpath:viewSql/patientAppointmentView.sql"
      },
      {
        "name": "patient_program_medication_view",
        "sourceFilePath": "classpath:viewSql/patientProgramMedicationView.sql"
      },
      {
        "name": "patient_diagnosis_condition_view",
        "sourceFilePath": "classpath:viewSql/patientDiagnosisConditionView.sql"
      },
      {
        "name": "patient_bed_tags_history_view",
        "sourceFilePath": "classpath:viewSql/patientBedTagView.sql"
      }
      ]
      }
  liquibase.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
        <include resource="org/springframework/boot/logging/logback/base.xml" />
        <logger name="org.bahmni.mart" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="org.springframework" level="INFO" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="liquibase" level="WARN" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
    </configuration>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mart-db-scripts
data:
  create_analytics_db.sh: |
    #!/bin/bash

    set -eu

    function create_user_and_database() {
      local database=$1
      local user=$2
      local password=$3
      echo "  Creating '$user' user and '$database' database..."
      PGPASSWORD=$POSTGRES_PASSWORD psql -v ON_ERROR_STOP=1  -h $POSTGRES_HOST --username "$POSTGRES_USER" $POSTGRES_DB <<-EOSQL
          CREATE USER $user WITH UNENCRYPTED PASSWORD '$password';
          CREATE DATABASE $database;
          GRANT ALL PRIVILEGES ON DATABASE $user TO $database;
    EOSQL
    }

    PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST --username $POSTGRES_USER $POSTGRES_DB  -tAc "SELECT 1 FROM pg_roles WHERE rolname='$ANALYTICS_DB_USER'" | grep -q 1 || create_user_and_database ${ANALYTICS_DB_NAME} ${ANALYTICS_DB_USER} ${ANALYTICS_DB_PASSWORD}
{{ end }}{{ end }}{{ end }}
