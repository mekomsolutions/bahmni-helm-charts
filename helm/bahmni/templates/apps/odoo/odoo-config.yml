{{ if .Values.apps }}{{ if .Values.apps.odoo }} {{ if .Values.apps.odoo.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: odoo-configs
  labels:
    app: odoo
data:
  ODOO_DB_USER: odoo
  ODOO_DB_PASSWORD: password
  ODOO_DB_NAME: odoo
  ODOO_HOST: odoo
  ODOO_USER: admin
  ODOO_PASSWORD: admin
  ODOO_MASTER_PASSWORD: password
  ODOO_PUBLIC_PORT: "8069"
  ODOO_EXTRA_ADDONS: odoo_addons
  ODOO_CONFIG_PATH: odoo_config
  ODOO_PORT: "80"
  ADDONS: sale_management,stock,account_account,odoo_initializer,mrp,purchase,mrp_product_expiry,product_expiry,l10n_generic_coa
  INITIALIZER_DATA_FILES_PATH: /opt/odoo-config
  INITIALIZER_CONFIG_FILE_PATH: /opt/odoo-config/initializer_config.json
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: odoo-conf
data:
  odoo.conf: |
    [options]
    addons_path = /mnt/extra-addons,/opt/odoo/addons
    data_dir = /var/lib/odoo
    initializer_data_files_paths = ${INITIALIZER_DATA_FILES_PATH}
    initializer_config_file_path = ${INITIALIZER_CONFIG_FILE_PATH}
    test_enable = False
    test_file = False
    without_demo = all
    limit_time_real = 500
    list_db = False
    admin_passwd = ${ODOO_MASTER_PASSWORD}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: odoo-db
data:
  create_odoo_role.sh: |
    #!/bin/bash
    export PGPASSWORD=$POSTGRES_PASSWORD
    set -eu

    function create_user() {
      local user=$1
      local password=$2
      echo "  Creating '$user' user..."
      psql -h $POSTGRES_HOST -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" $POSTGRES_DB <<-EOSQL
          CREATE USER $user WITH UNENCRYPTED PASSWORD '$password';
          ALTER USER $user CREATEDB;
    EOSQL
    }

    PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST --username $POSTGRES_USER $POSTGRES_DB  -tAc "SELECT 1 FROM pg_roles WHERE rolname='$ODOO_DB_USER'" | grep -q 1 ||  create_user ${ODOO_DB_USER} ${ODOO_DB_PASSWORD}
    echo "Success."
{{ end }}{{ end }}{{ end }}
